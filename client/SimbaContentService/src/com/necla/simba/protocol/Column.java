/*******************************************************************************
 *    Copyright 2015 Dorian Perkins, Younghwan Go, Nitin Agrawal, Akshat Aranya
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *******************************************************************************/
package com.necla.simba.protocol;
// Generated by proto2javame, Sun Feb 08 14:12:26 KST 2015.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class Column extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String name;
	private static final int fieldNumberName = 1;

	private final int type;
	private static final int fieldNumberType = 2;


	public static Builder newBuilder() {
		return new Builder();
	}

	private Column(final Builder builder) {
		if (builder.hasName && builder.hasType ) {
			this.name = builder.name;
			this.type = builder.type;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" name:" + builder.hasName + " type:" + builder.hasType + "");
		}
	}

	public static class Type {
		public static int INT = 1;
		public static int VARCHAR = 2;
		public static int UUID = 3;
		public static int OBJECT = 4;
		public static int BOOLEAN = 5;
		public static int BIGINT = 6;
		public static int BLOB = 7;
		public static int COUNTER = 8;
		public static int DOUBLE = 9;
		public static int FLOAT = 10;
		public static int INET = 11;
		public static int TIMESTAMP = 12;
		public static int VARINT = 13;

		public static String getStringValue(int value) {
			String retValue;

			switch(value) {
				case 1:
					retValue = "INT";
					break;
				case 2:
					retValue = "VARCHAR";
					break;
				case 3:
					retValue = "UUID";
					break;
				case 4:
					retValue = "OBJECT";
					break;
				case 5:
					retValue = "BOOLEAN";
					break;
				case 6:
					retValue = "BIGINT";
					break;
				case 7:
					retValue = "BLOB";
					break;
				case 8:
					retValue = "COUNTER";
					break;
				case 9:
					retValue = "DOUBLE";
					break;
				case 10:
					retValue = "FLOAT";
					break;
				case 11:
					retValue = "INET";
					break;
				case 12:
					retValue = "TIMESTAMP";
					break;
				case 13:
					retValue = "VARINT";
					break;
				default:
					retValue = "";
					break;
			}

			return retValue;
		}
	}

	public static class Builder {
		private String name;
		private boolean hasName = false;

		private int type;
		private boolean hasType = false;


		private Builder() {
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		public Column build() {
			return new Column(this);
		}
	}

	public String getName() {
		return name;
	}

	public int getType() {
		return type;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "name = " + this.name + TAB;
		retValue += "type = " + this.type + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeString(fieldNumberName, name);
		writer.writeInt(fieldNumberType, type);
	}

	static Column parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final Column.Builder builder = Column.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberType:
				builder.setType(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		Column.unknownTagHandler = unknownTagHandler;
	}

	public static Column parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static Column parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static Column parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}