/*******************************************************************************
 *    Copyright 2015 Dorian Perkins, Younghwan Go, Nitin Agrawal, Akshat Aranya
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *******************************************************************************/
package com.necla.simba.protocol;
// Generated by proto2javame, Sun Feb 08 14:12:31 KST 2015.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class SimbaMessage extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int type;
	private static final int fieldNumberType = 1;

	private final int seq;
	private static final int fieldNumberSeq = 2;

	private final String token;
	private static final int fieldNumberToken = 3;
	private final boolean hasToken;

	private final ActivePullResponse activePullResponse;
	private static final int fieldNumberActivePullResponse = 4;
	private final boolean hasActivePullResponse;

	private final SyncResponse syncResponse;
	private static final int fieldNumberSyncResponse = 5;
	private final boolean hasSyncResponse;

	private final ControlResponse controlResponse;
	private static final int fieldNumberControlResponse = 6;
	private final boolean hasControlResponse;

	private final RegisterDevice registerDevice;
	private static final int fieldNumberRegisterDevice = 7;
	private final boolean hasRegisterDevice;

	private final SubscribeTable subscribeTable;
	private static final int fieldNumberSubscribeTable = 8;
	private final boolean hasSubscribeTable;

	private final UnsubscribeTable unsubscribeTable;
	private static final int fieldNumberUnsubscribeTable = 9;
	private final boolean hasUnsubscribeTable;

	private final Reconnect reconnect;
	private static final int fieldNumberReconnect = 10;
	private final boolean hasReconnect;

	private final PullData pullData;
	private static final int fieldNumberPullData = 11;
	private final boolean hasPullData;

	private final Notify notify;
	private static final int fieldNumberNotify = 12;
	private final boolean hasNotify;

	private final PassivePull passivePull;
	private static final int fieldNumberPassivePull = 13;
	private final boolean hasPassivePull;

	private final ActivePull activePull;
	private static final int fieldNumberActivePull = 14;
	private final boolean hasActivePull;

	private final SyncRequest syncRequest;
	private static final int fieldNumberSyncRequest = 15;
	private final boolean hasSyncRequest;

	private final BitmapNotify bitmapNotify;
	private static final int fieldNumberBitmapNotify = 16;
	private final boolean hasBitmapNotify;

	private final CreateTable createTable;
	private static final int fieldNumberCreateTable = 17;
	private final boolean hasCreateTable;

	private final DropTable dropTable;
	private static final int fieldNumberDropTable = 18;
	private final boolean hasDropTable;

	private final ObjectFragment objectFragment;
	private static final int fieldNumberObjectFragment = 19;
	private final boolean hasObjectFragment;

	private final NotificationPull notificationPull;
	private static final int fieldNumberNotificationPull = 20;
	private final boolean hasNotificationPull;

	private final TornRowRequest tornRowRequest;
	private static final int fieldNumberTornRowRequest = 21;
	private final boolean hasTornRowRequest;

	private final TornRowResponse tornRowResponse;
	private static final int fieldNumberTornRowResponse = 22;
	private final boolean hasTornRowResponse;

	private final SubscribeResponse subscribeResponse;
	private static final int fieldNumberSubscribeResponse = 23;
	private final boolean hasSubscribeResponse;


	public static Builder newBuilder() {
		return new Builder();
	}

	private SimbaMessage(final Builder builder) {
		if (builder.hasType && builder.hasSeq ) {
			this.type = builder.type;
			this.seq = builder.seq;
			this.token = builder.token;
			this.hasToken = builder.hasToken;
			this.activePullResponse = builder.activePullResponse;
			this.hasActivePullResponse = builder.hasActivePullResponse;
			this.syncResponse = builder.syncResponse;
			this.hasSyncResponse = builder.hasSyncResponse;
			this.controlResponse = builder.controlResponse;
			this.hasControlResponse = builder.hasControlResponse;
			this.registerDevice = builder.registerDevice;
			this.hasRegisterDevice = builder.hasRegisterDevice;
			this.subscribeTable = builder.subscribeTable;
			this.hasSubscribeTable = builder.hasSubscribeTable;
			this.unsubscribeTable = builder.unsubscribeTable;
			this.hasUnsubscribeTable = builder.hasUnsubscribeTable;
			this.reconnect = builder.reconnect;
			this.hasReconnect = builder.hasReconnect;
			this.pullData = builder.pullData;
			this.hasPullData = builder.hasPullData;
			this.notify = builder.notify;
			this.hasNotify = builder.hasNotify;
			this.passivePull = builder.passivePull;
			this.hasPassivePull = builder.hasPassivePull;
			this.activePull = builder.activePull;
			this.hasActivePull = builder.hasActivePull;
			this.syncRequest = builder.syncRequest;
			this.hasSyncRequest = builder.hasSyncRequest;
			this.bitmapNotify = builder.bitmapNotify;
			this.hasBitmapNotify = builder.hasBitmapNotify;
			this.createTable = builder.createTable;
			this.hasCreateTable = builder.hasCreateTable;
			this.dropTable = builder.dropTable;
			this.hasDropTable = builder.hasDropTable;
			this.objectFragment = builder.objectFragment;
			this.hasObjectFragment = builder.hasObjectFragment;
			this.notificationPull = builder.notificationPull;
			this.hasNotificationPull = builder.hasNotificationPull;
			this.tornRowRequest = builder.tornRowRequest;
			this.hasTornRowRequest = builder.hasTornRowRequest;
			this.tornRowResponse = builder.tornRowResponse;
			this.hasTornRowResponse = builder.hasTornRowResponse;
			this.subscribeResponse = builder.subscribeResponse;
			this.hasSubscribeResponse = builder.hasSubscribeResponse;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" type:" + builder.hasType + " seq:" + builder.hasSeq + "");
		}
	}

	public static class Type {
		public static int SYNC_REQUEST = 1;
		public static int SYNC_RESPONSE = 2;
		public static int CONTROL_RESPONSE = 3;
		public static int REG_DEV = 4;
		public static int UNREG_DEV = 5;
		public static int SUB_TBL = 6;
		public static int UNSUB_TBL = 7;
		public static int RECONN = 8;
		public static int NOTIFY_ACK = 9;
		public static int PULL_DATA = 10;
		public static int NOTIFY = 11;
		public static int PASSIVE_PULL = 12;
		public static int ACTIVE_PULL = 13;
		public static int ACTIVE_PULL_RESPONSE = 14;
		public static int BITMAP_NOTIFY = 15;
		public static int DROP_TABLE = 17;
		public static int CREATE_TABLE = 16;
		public static int NOTIFICATION_PULL = 19;
		public static int OBJECT_FRAGMENT = 18;
		public static int TORN_RESPONSE = 21;
		public static int TORN_REQUEST = 20;
		public static int SUB_RESPONSE = 22;

		public static String getStringValue(int value) {
			String retValue;

			switch(value) {
				case 1:
					retValue = "SYNC_REQUEST";
					break;
				case 2:
					retValue = "SYNC_RESPONSE";
					break;
				case 3:
					retValue = "CONTROL_RESPONSE";
					break;
				case 4:
					retValue = "REG_DEV";
					break;
				case 5:
					retValue = "UNREG_DEV";
					break;
				case 6:
					retValue = "SUB_TBL";
					break;
				case 7:
					retValue = "UNSUB_TBL";
					break;
				case 8:
					retValue = "RECONN";
					break;
				case 9:
					retValue = "NOTIFY_ACK";
					break;
				case 10:
					retValue = "PULL_DATA";
					break;
				case 11:
					retValue = "NOTIFY";
					break;
				case 12:
					retValue = "PASSIVE_PULL";
					break;
				case 13:
					retValue = "ACTIVE_PULL";
					break;
				case 14:
					retValue = "ACTIVE_PULL_RESPONSE";
					break;
				case 15:
					retValue = "BITMAP_NOTIFY";
					break;
				case 17:
					retValue = "DROP_TABLE";
					break;
				case 16:
					retValue = "CREATE_TABLE";
					break;
				case 19:
					retValue = "NOTIFICATION_PULL";
					break;
				case 18:
					retValue = "OBJECT_FRAGMENT";
					break;
				case 21:
					retValue = "TORN_RESPONSE";
					break;
				case 20:
					retValue = "TORN_REQUEST";
					break;
				case 22:
					retValue = "SUB_RESPONSE";
					break;
				default:
					retValue = "";
					break;
			}

			return retValue;
		}
	}

	public static class Builder {
		private int type;
		private boolean hasType = false;

		private int seq;
		private boolean hasSeq = false;

		private String token;
		private boolean hasToken = false;

		private ActivePullResponse activePullResponse;
		private boolean hasActivePullResponse = false;

		private SyncResponse syncResponse;
		private boolean hasSyncResponse = false;

		private ControlResponse controlResponse;
		private boolean hasControlResponse = false;

		private RegisterDevice registerDevice;
		private boolean hasRegisterDevice = false;

		private SubscribeTable subscribeTable;
		private boolean hasSubscribeTable = false;

		private UnsubscribeTable unsubscribeTable;
		private boolean hasUnsubscribeTable = false;

		private Reconnect reconnect;
		private boolean hasReconnect = false;

		private PullData pullData;
		private boolean hasPullData = false;

		private Notify notify;
		private boolean hasNotify = false;

		private PassivePull passivePull;
		private boolean hasPassivePull = false;

		private ActivePull activePull;
		private boolean hasActivePull = false;

		private SyncRequest syncRequest;
		private boolean hasSyncRequest = false;

		private BitmapNotify bitmapNotify;
		private boolean hasBitmapNotify = false;

		private CreateTable createTable;
		private boolean hasCreateTable = false;

		private DropTable dropTable;
		private boolean hasDropTable = false;

		private ObjectFragment objectFragment;
		private boolean hasObjectFragment = false;

		private NotificationPull notificationPull;
		private boolean hasNotificationPull = false;

		private TornRowRequest tornRowRequest;
		private boolean hasTornRowRequest = false;

		private TornRowResponse tornRowResponse;
		private boolean hasTornRowResponse = false;

		private SubscribeResponse subscribeResponse;
		private boolean hasSubscribeResponse = false;


		private Builder() {
		}

		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		public Builder setSeq(final int seq) {
			this.seq = seq;
			this.hasSeq = true;
			return this;
		}

		public Builder setToken(final String token) {
			this.token = token;
			this.hasToken = true;
			return this;
		}

		public Builder setActivePullResponse(final ActivePullResponse activePullResponse) {
			this.activePullResponse = activePullResponse;
			this.hasActivePullResponse = true;
			return this;
		}

		public Builder setSyncResponse(final SyncResponse syncResponse) {
			this.syncResponse = syncResponse;
			this.hasSyncResponse = true;
			return this;
		}

		public Builder setControlResponse(final ControlResponse controlResponse) {
			this.controlResponse = controlResponse;
			this.hasControlResponse = true;
			return this;
		}

		public Builder setRegisterDevice(final RegisterDevice registerDevice) {
			this.registerDevice = registerDevice;
			this.hasRegisterDevice = true;
			return this;
		}

		public Builder setSubscribeTable(final SubscribeTable subscribeTable) {
			this.subscribeTable = subscribeTable;
			this.hasSubscribeTable = true;
			return this;
		}

		public Builder setUnsubscribeTable(final UnsubscribeTable unsubscribeTable) {
			this.unsubscribeTable = unsubscribeTable;
			this.hasUnsubscribeTable = true;
			return this;
		}

		public Builder setReconnect(final Reconnect reconnect) {
			this.reconnect = reconnect;
			this.hasReconnect = true;
			return this;
		}

		public Builder setPullData(final PullData pullData) {
			this.pullData = pullData;
			this.hasPullData = true;
			return this;
		}

		public Builder setNotify(final Notify notify) {
			this.notify = notify;
			this.hasNotify = true;
			return this;
		}

		public Builder setPassivePull(final PassivePull passivePull) {
			this.passivePull = passivePull;
			this.hasPassivePull = true;
			return this;
		}

		public Builder setActivePull(final ActivePull activePull) {
			this.activePull = activePull;
			this.hasActivePull = true;
			return this;
		}

		public Builder setSyncRequest(final SyncRequest syncRequest) {
			this.syncRequest = syncRequest;
			this.hasSyncRequest = true;
			return this;
		}

		public Builder setBitmapNotify(final BitmapNotify bitmapNotify) {
			this.bitmapNotify = bitmapNotify;
			this.hasBitmapNotify = true;
			return this;
		}

		public Builder setCreateTable(final CreateTable createTable) {
			this.createTable = createTable;
			this.hasCreateTable = true;
			return this;
		}

		public Builder setDropTable(final DropTable dropTable) {
			this.dropTable = dropTable;
			this.hasDropTable = true;
			return this;
		}

		public Builder setObjectFragment(final ObjectFragment objectFragment) {
			this.objectFragment = objectFragment;
			this.hasObjectFragment = true;
			return this;
		}

		public Builder setNotificationPull(final NotificationPull notificationPull) {
			this.notificationPull = notificationPull;
			this.hasNotificationPull = true;
			return this;
		}

		public Builder setTornRowRequest(final TornRowRequest tornRowRequest) {
			this.tornRowRequest = tornRowRequest;
			this.hasTornRowRequest = true;
			return this;
		}

		public Builder setTornRowResponse(final TornRowResponse tornRowResponse) {
			this.tornRowResponse = tornRowResponse;
			this.hasTornRowResponse = true;
			return this;
		}

		public Builder setSubscribeResponse(final SubscribeResponse subscribeResponse) {
			this.subscribeResponse = subscribeResponse;
			this.hasSubscribeResponse = true;
			return this;
		}

		public SimbaMessage build() {
			return new SimbaMessage(this);
		}
	}

	public int getType() {
		return type;
	}

	public int getSeq() {
		return seq;
	}

	public String getToken() {
		return token;
	}

	public boolean hasToken() {
		return hasToken;
	}

	public ActivePullResponse getActivePullResponse() {
		return activePullResponse;
	}

	public boolean hasActivePullResponse() {
		return hasActivePullResponse;
	}

	public SyncResponse getSyncResponse() {
		return syncResponse;
	}

	public boolean hasSyncResponse() {
		return hasSyncResponse;
	}

	public ControlResponse getControlResponse() {
		return controlResponse;
	}

	public boolean hasControlResponse() {
		return hasControlResponse;
	}

	public RegisterDevice getRegisterDevice() {
		return registerDevice;
	}

	public boolean hasRegisterDevice() {
		return hasRegisterDevice;
	}

	public SubscribeTable getSubscribeTable() {
		return subscribeTable;
	}

	public boolean hasSubscribeTable() {
		return hasSubscribeTable;
	}

	public UnsubscribeTable getUnsubscribeTable() {
		return unsubscribeTable;
	}

	public boolean hasUnsubscribeTable() {
		return hasUnsubscribeTable;
	}

	public Reconnect getReconnect() {
		return reconnect;
	}

	public boolean hasReconnect() {
		return hasReconnect;
	}

	public PullData getPullData() {
		return pullData;
	}

	public boolean hasPullData() {
		return hasPullData;
	}

	public Notify getNotify() {
		return notify;
	}

	public boolean hasNotify() {
		return hasNotify;
	}

	public PassivePull getPassivePull() {
		return passivePull;
	}

	public boolean hasPassivePull() {
		return hasPassivePull;
	}

	public ActivePull getActivePull() {
		return activePull;
	}

	public boolean hasActivePull() {
		return hasActivePull;
	}

	public SyncRequest getSyncRequest() {
		return syncRequest;
	}

	public boolean hasSyncRequest() {
		return hasSyncRequest;
	}

	public BitmapNotify getBitmapNotify() {
		return bitmapNotify;
	}

	public boolean hasBitmapNotify() {
		return hasBitmapNotify;
	}

	public CreateTable getCreateTable() {
		return createTable;
	}

	public boolean hasCreateTable() {
		return hasCreateTable;
	}

	public DropTable getDropTable() {
		return dropTable;
	}

	public boolean hasDropTable() {
		return hasDropTable;
	}

	public ObjectFragment getObjectFragment() {
		return objectFragment;
	}

	public boolean hasObjectFragment() {
		return hasObjectFragment;
	}

	public NotificationPull getNotificationPull() {
		return notificationPull;
	}

	public boolean hasNotificationPull() {
		return hasNotificationPull;
	}

	public TornRowRequest getTornRowRequest() {
		return tornRowRequest;
	}

	public boolean hasTornRowRequest() {
		return hasTornRowRequest;
	}

	public TornRowResponse getTornRowResponse() {
		return tornRowResponse;
	}

	public boolean hasTornRowResponse() {
		return hasTornRowResponse;
	}

	public SubscribeResponse getSubscribeResponse() {
		return subscribeResponse;
	}

	public boolean hasSubscribeResponse() {
		return hasSubscribeResponse;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "type = " + this.type + TAB;
		retValue += "seq = " + this.seq + TAB;
		if(hasToken) retValue += "token = " + this.token + TAB;
		if(hasActivePullResponse) retValue += "activePullResponse = " + this.activePullResponse + TAB;
		if(hasSyncResponse) retValue += "syncResponse = " + this.syncResponse + TAB;
		if(hasControlResponse) retValue += "controlResponse = " + this.controlResponse + TAB;
		if(hasRegisterDevice) retValue += "registerDevice = " + this.registerDevice + TAB;
		if(hasSubscribeTable) retValue += "subscribeTable = " + this.subscribeTable + TAB;
		if(hasUnsubscribeTable) retValue += "unsubscribeTable = " + this.unsubscribeTable + TAB;
		if(hasReconnect) retValue += "reconnect = " + this.reconnect + TAB;
		if(hasPullData) retValue += "pullData = " + this.pullData + TAB;
		if(hasNotify) retValue += "notify = " + this.notify + TAB;
		if(hasPassivePull) retValue += "passivePull = " + this.passivePull + TAB;
		if(hasActivePull) retValue += "activePull = " + this.activePull + TAB;
		if(hasSyncRequest) retValue += "syncRequest = " + this.syncRequest + TAB;
		if(hasBitmapNotify) retValue += "bitmapNotify = " + this.bitmapNotify + TAB;
		if(hasCreateTable) retValue += "createTable = " + this.createTable + TAB;
		if(hasDropTable) retValue += "dropTable = " + this.dropTable + TAB;
		if(hasObjectFragment) retValue += "objectFragment = " + this.objectFragment + TAB;
		if(hasNotificationPull) retValue += "notificationPull = " + this.notificationPull + TAB;
		if(hasTornRowRequest) retValue += "tornRowRequest = " + this.tornRowRequest + TAB;
		if(hasTornRowResponse) retValue += "tornRowResponse = " + this.tornRowResponse + TAB;
		if(hasSubscribeResponse) retValue += "subscribeResponse = " + this.subscribeResponse + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeq, seq);
		if(hasToken) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberToken, token);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasActivePullResponse) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberActivePullResponse, activePullResponse.computeSize());
		if(hasSyncResponse) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSyncResponse, syncResponse.computeSize());
		if(hasControlResponse) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberControlResponse, controlResponse.computeSize());
		if(hasRegisterDevice) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberRegisterDevice, registerDevice.computeSize());
		if(hasSubscribeTable) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSubscribeTable, subscribeTable.computeSize());
		if(hasUnsubscribeTable) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberUnsubscribeTable, unsubscribeTable.computeSize());
		if(hasReconnect) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberReconnect, reconnect.computeSize());
		if(hasPullData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberPullData, pullData.computeSize());
		if(hasNotify) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberNotify, notify.computeSize());
		if(hasPassivePull) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberPassivePull, passivePull.computeSize());
		if(hasActivePull) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberActivePull, activePull.computeSize());
		if(hasSyncRequest) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSyncRequest, syncRequest.computeSize());
		if(hasBitmapNotify) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberBitmapNotify, bitmapNotify.computeSize());
		if(hasCreateTable) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberCreateTable, createTable.computeSize());
		if(hasDropTable) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberDropTable, dropTable.computeSize());
		if(hasObjectFragment) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberObjectFragment, objectFragment.computeSize());
		if(hasNotificationPull) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberNotificationPull, notificationPull.computeSize());
		if(hasTornRowRequest) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberTornRowRequest, tornRowRequest.computeSize());
		if(hasTornRowResponse) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberTornRowResponse, tornRowResponse.computeSize());
		if(hasSubscribeResponse) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSubscribeResponse, subscribeResponse.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberType, type);
		writer.writeInt(fieldNumberSeq, seq);
		if(hasToken) writer.writeString(fieldNumberToken, token);
		if(hasActivePullResponse) { writer.writeMessage(fieldNumberActivePullResponse, activePullResponse.computeSize()); activePullResponse.writeFields(writer); }
		if(hasSyncResponse) { writer.writeMessage(fieldNumberSyncResponse, syncResponse.computeSize()); syncResponse.writeFields(writer); }
		if(hasControlResponse) { writer.writeMessage(fieldNumberControlResponse, controlResponse.computeSize()); controlResponse.writeFields(writer); }
		if(hasRegisterDevice) { writer.writeMessage(fieldNumberRegisterDevice, registerDevice.computeSize()); registerDevice.writeFields(writer); }
		if(hasSubscribeTable) { writer.writeMessage(fieldNumberSubscribeTable, subscribeTable.computeSize()); subscribeTable.writeFields(writer); }
		if(hasUnsubscribeTable) { writer.writeMessage(fieldNumberUnsubscribeTable, unsubscribeTable.computeSize()); unsubscribeTable.writeFields(writer); }
		if(hasReconnect) { writer.writeMessage(fieldNumberReconnect, reconnect.computeSize()); reconnect.writeFields(writer); }
		if(hasPullData) { writer.writeMessage(fieldNumberPullData, pullData.computeSize()); pullData.writeFields(writer); }
		if(hasNotify) { writer.writeMessage(fieldNumberNotify, notify.computeSize()); notify.writeFields(writer); }
		if(hasPassivePull) { writer.writeMessage(fieldNumberPassivePull, passivePull.computeSize()); passivePull.writeFields(writer); }
		if(hasActivePull) { writer.writeMessage(fieldNumberActivePull, activePull.computeSize()); activePull.writeFields(writer); }
		if(hasSyncRequest) { writer.writeMessage(fieldNumberSyncRequest, syncRequest.computeSize()); syncRequest.writeFields(writer); }
		if(hasBitmapNotify) { writer.writeMessage(fieldNumberBitmapNotify, bitmapNotify.computeSize()); bitmapNotify.writeFields(writer); }
		if(hasCreateTable) { writer.writeMessage(fieldNumberCreateTable, createTable.computeSize()); createTable.writeFields(writer); }
		if(hasDropTable) { writer.writeMessage(fieldNumberDropTable, dropTable.computeSize()); dropTable.writeFields(writer); }
		if(hasObjectFragment) { writer.writeMessage(fieldNumberObjectFragment, objectFragment.computeSize()); objectFragment.writeFields(writer); }
		if(hasNotificationPull) { writer.writeMessage(fieldNumberNotificationPull, notificationPull.computeSize()); notificationPull.writeFields(writer); }
		if(hasTornRowRequest) { writer.writeMessage(fieldNumberTornRowRequest, tornRowRequest.computeSize()); tornRowRequest.writeFields(writer); }
		if(hasTornRowResponse) { writer.writeMessage(fieldNumberTornRowResponse, tornRowResponse.computeSize()); tornRowResponse.writeFields(writer); }
		if(hasSubscribeResponse) { writer.writeMessage(fieldNumberSubscribeResponse, subscribeResponse.computeSize()); subscribeResponse.writeFields(writer); }
	}

	static SimbaMessage parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final SimbaMessage.Builder builder = SimbaMessage.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberType:
				builder.setType(reader.readInt(fieldNumber));
				break;
			case fieldNumberSeq:
				builder.setSeq(reader.readInt(fieldNumber));
				break;
			case fieldNumberToken:
				builder.setToken(reader.readString(fieldNumber));
				break;
			case fieldNumberActivePullResponse:
				Vector vcActivePullResponse = reader.readMessages(fieldNumberActivePullResponse);
				for(int i = 0 ; i < vcActivePullResponse.size(); i++) {
					byte[] eachBinData = (byte[]) vcActivePullResponse.elementAt(i);
					ActivePullResponse.Builder builderActivePullResponse = ActivePullResponse.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolActivePullResponse = true;
					int nestedFieldActivePullResponse = -1;
					while(boolActivePullResponse) {
						nestedFieldActivePullResponse = getNextFieldNumber(innerInputReader);
						boolActivePullResponse = ActivePullResponse.populateBuilderWithField(innerInputReader, builderActivePullResponse, nestedFieldActivePullResponse);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setActivePullResponse(builderActivePullResponse.build());
				}
				break;
			case fieldNumberSyncResponse:
				Vector vcSyncResponse = reader.readMessages(fieldNumberSyncResponse);
				for(int i = 0 ; i < vcSyncResponse.size(); i++) {
					byte[] eachBinData = (byte[]) vcSyncResponse.elementAt(i);
					SyncResponse.Builder builderSyncResponse = SyncResponse.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSyncResponse = true;
					int nestedFieldSyncResponse = -1;
					while(boolSyncResponse) {
						nestedFieldSyncResponse = getNextFieldNumber(innerInputReader);
						boolSyncResponse = SyncResponse.populateBuilderWithField(innerInputReader, builderSyncResponse, nestedFieldSyncResponse);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setSyncResponse(builderSyncResponse.build());
				}
				break;
			case fieldNumberControlResponse:
				Vector vcControlResponse = reader.readMessages(fieldNumberControlResponse);
				for(int i = 0 ; i < vcControlResponse.size(); i++) {
					byte[] eachBinData = (byte[]) vcControlResponse.elementAt(i);
					ControlResponse.Builder builderControlResponse = ControlResponse.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolControlResponse = true;
					int nestedFieldControlResponse = -1;
					while(boolControlResponse) {
						nestedFieldControlResponse = getNextFieldNumber(innerInputReader);
						boolControlResponse = ControlResponse.populateBuilderWithField(innerInputReader, builderControlResponse, nestedFieldControlResponse);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setControlResponse(builderControlResponse.build());
				}
				break;
			case fieldNumberRegisterDevice:
				Vector vcRegisterDevice = reader.readMessages(fieldNumberRegisterDevice);
				for(int i = 0 ; i < vcRegisterDevice.size(); i++) {
					byte[] eachBinData = (byte[]) vcRegisterDevice.elementAt(i);
					RegisterDevice.Builder builderRegisterDevice = RegisterDevice.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolRegisterDevice = true;
					int nestedFieldRegisterDevice = -1;
					while(boolRegisterDevice) {
						nestedFieldRegisterDevice = getNextFieldNumber(innerInputReader);
						boolRegisterDevice = RegisterDevice.populateBuilderWithField(innerInputReader, builderRegisterDevice, nestedFieldRegisterDevice);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setRegisterDevice(builderRegisterDevice.build());
				}
				break;
			case fieldNumberSubscribeTable:
				Vector vcSubscribeTable = reader.readMessages(fieldNumberSubscribeTable);
				for(int i = 0 ; i < vcSubscribeTable.size(); i++) {
					byte[] eachBinData = (byte[]) vcSubscribeTable.elementAt(i);
					SubscribeTable.Builder builderSubscribeTable = SubscribeTable.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSubscribeTable = true;
					int nestedFieldSubscribeTable = -1;
					while(boolSubscribeTable) {
						nestedFieldSubscribeTable = getNextFieldNumber(innerInputReader);
						boolSubscribeTable = SubscribeTable.populateBuilderWithField(innerInputReader, builderSubscribeTable, nestedFieldSubscribeTable);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setSubscribeTable(builderSubscribeTable.build());
				}
				break;
			case fieldNumberUnsubscribeTable:
				Vector vcUnsubscribeTable = reader.readMessages(fieldNumberUnsubscribeTable);
				for(int i = 0 ; i < vcUnsubscribeTable.size(); i++) {
					byte[] eachBinData = (byte[]) vcUnsubscribeTable.elementAt(i);
					UnsubscribeTable.Builder builderUnsubscribeTable = UnsubscribeTable.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolUnsubscribeTable = true;
					int nestedFieldUnsubscribeTable = -1;
					while(boolUnsubscribeTable) {
						nestedFieldUnsubscribeTable = getNextFieldNumber(innerInputReader);
						boolUnsubscribeTable = UnsubscribeTable.populateBuilderWithField(innerInputReader, builderUnsubscribeTable, nestedFieldUnsubscribeTable);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setUnsubscribeTable(builderUnsubscribeTable.build());
				}
				break;
			case fieldNumberReconnect:
				Vector vcReconnect = reader.readMessages(fieldNumberReconnect);
				for(int i = 0 ; i < vcReconnect.size(); i++) {
					byte[] eachBinData = (byte[]) vcReconnect.elementAt(i);
					Reconnect.Builder builderReconnect = Reconnect.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolReconnect = true;
					int nestedFieldReconnect = -1;
					while(boolReconnect) {
						nestedFieldReconnect = getNextFieldNumber(innerInputReader);
						boolReconnect = Reconnect.populateBuilderWithField(innerInputReader, builderReconnect, nestedFieldReconnect);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setReconnect(builderReconnect.build());
				}
				break;
			case fieldNumberPullData:
				Vector vcPullData = reader.readMessages(fieldNumberPullData);
				for(int i = 0 ; i < vcPullData.size(); i++) {
					byte[] eachBinData = (byte[]) vcPullData.elementAt(i);
					PullData.Builder builderPullData = PullData.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolPullData = true;
					int nestedFieldPullData = -1;
					while(boolPullData) {
						nestedFieldPullData = getNextFieldNumber(innerInputReader);
						boolPullData = PullData.populateBuilderWithField(innerInputReader, builderPullData, nestedFieldPullData);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setPullData(builderPullData.build());
				}
				break;
			case fieldNumberNotify:
				Vector vcNotify = reader.readMessages(fieldNumberNotify);
				for(int i = 0 ; i < vcNotify.size(); i++) {
					byte[] eachBinData = (byte[]) vcNotify.elementAt(i);
					Notify.Builder builderNotify = Notify.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolNotify = true;
					int nestedFieldNotify = -1;
					while(boolNotify) {
						nestedFieldNotify = getNextFieldNumber(innerInputReader);
						boolNotify = Notify.populateBuilderWithField(innerInputReader, builderNotify, nestedFieldNotify);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setNotify(builderNotify.build());
				}
				break;
			case fieldNumberPassivePull:
				Vector vcPassivePull = reader.readMessages(fieldNumberPassivePull);
				for(int i = 0 ; i < vcPassivePull.size(); i++) {
					byte[] eachBinData = (byte[]) vcPassivePull.elementAt(i);
					PassivePull.Builder builderPassivePull = PassivePull.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolPassivePull = true;
					int nestedFieldPassivePull = -1;
					while(boolPassivePull) {
						nestedFieldPassivePull = getNextFieldNumber(innerInputReader);
						boolPassivePull = PassivePull.populateBuilderWithField(innerInputReader, builderPassivePull, nestedFieldPassivePull);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setPassivePull(builderPassivePull.build());
				}
				break;
			case fieldNumberActivePull:
				Vector vcActivePull = reader.readMessages(fieldNumberActivePull);
				for(int i = 0 ; i < vcActivePull.size(); i++) {
					byte[] eachBinData = (byte[]) vcActivePull.elementAt(i);
					ActivePull.Builder builderActivePull = ActivePull.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolActivePull = true;
					int nestedFieldActivePull = -1;
					while(boolActivePull) {
						nestedFieldActivePull = getNextFieldNumber(innerInputReader);
						boolActivePull = ActivePull.populateBuilderWithField(innerInputReader, builderActivePull, nestedFieldActivePull);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setActivePull(builderActivePull.build());
				}
				break;
			case fieldNumberSyncRequest:
				Vector vcSyncRequest = reader.readMessages(fieldNumberSyncRequest);
				for(int i = 0 ; i < vcSyncRequest.size(); i++) {
					byte[] eachBinData = (byte[]) vcSyncRequest.elementAt(i);
					SyncRequest.Builder builderSyncRequest = SyncRequest.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSyncRequest = true;
					int nestedFieldSyncRequest = -1;
					while(boolSyncRequest) {
						nestedFieldSyncRequest = getNextFieldNumber(innerInputReader);
						boolSyncRequest = SyncRequest.populateBuilderWithField(innerInputReader, builderSyncRequest, nestedFieldSyncRequest);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setSyncRequest(builderSyncRequest.build());
				}
				break;
			case fieldNumberBitmapNotify:
				Vector vcBitmapNotify = reader.readMessages(fieldNumberBitmapNotify);
				for(int i = 0 ; i < vcBitmapNotify.size(); i++) {
					byte[] eachBinData = (byte[]) vcBitmapNotify.elementAt(i);
					BitmapNotify.Builder builderBitmapNotify = BitmapNotify.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolBitmapNotify = true;
					int nestedFieldBitmapNotify = -1;
					while(boolBitmapNotify) {
						nestedFieldBitmapNotify = getNextFieldNumber(innerInputReader);
						boolBitmapNotify = BitmapNotify.populateBuilderWithField(innerInputReader, builderBitmapNotify, nestedFieldBitmapNotify);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setBitmapNotify(builderBitmapNotify.build());
				}
				break;
			case fieldNumberCreateTable:
				Vector vcCreateTable = reader.readMessages(fieldNumberCreateTable);
				for(int i = 0 ; i < vcCreateTable.size(); i++) {
					byte[] eachBinData = (byte[]) vcCreateTable.elementAt(i);
					CreateTable.Builder builderCreateTable = CreateTable.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolCreateTable = true;
					int nestedFieldCreateTable = -1;
					while(boolCreateTable) {
						nestedFieldCreateTable = getNextFieldNumber(innerInputReader);
						boolCreateTable = CreateTable.populateBuilderWithField(innerInputReader, builderCreateTable, nestedFieldCreateTable);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setCreateTable(builderCreateTable.build());
				}
				break;
			case fieldNumberDropTable:
				Vector vcDropTable = reader.readMessages(fieldNumberDropTable);
				for(int i = 0 ; i < vcDropTable.size(); i++) {
					byte[] eachBinData = (byte[]) vcDropTable.elementAt(i);
					DropTable.Builder builderDropTable = DropTable.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolDropTable = true;
					int nestedFieldDropTable = -1;
					while(boolDropTable) {
						nestedFieldDropTable = getNextFieldNumber(innerInputReader);
						boolDropTable = DropTable.populateBuilderWithField(innerInputReader, builderDropTable, nestedFieldDropTable);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setDropTable(builderDropTable.build());
				}
				break;
			case fieldNumberObjectFragment:
				Vector vcObjectFragment = reader.readMessages(fieldNumberObjectFragment);
				for(int i = 0 ; i < vcObjectFragment.size(); i++) {
					byte[] eachBinData = (byte[]) vcObjectFragment.elementAt(i);
					ObjectFragment.Builder builderObjectFragment = ObjectFragment.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolObjectFragment = true;
					int nestedFieldObjectFragment = -1;
					while(boolObjectFragment) {
						nestedFieldObjectFragment = getNextFieldNumber(innerInputReader);
						boolObjectFragment = ObjectFragment.populateBuilderWithField(innerInputReader, builderObjectFragment, nestedFieldObjectFragment);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setObjectFragment(builderObjectFragment.build());
				}
				break;
			case fieldNumberNotificationPull:
				Vector vcNotificationPull = reader.readMessages(fieldNumberNotificationPull);
				for(int i = 0 ; i < vcNotificationPull.size(); i++) {
					byte[] eachBinData = (byte[]) vcNotificationPull.elementAt(i);
					NotificationPull.Builder builderNotificationPull = NotificationPull.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolNotificationPull = true;
					int nestedFieldNotificationPull = -1;
					while(boolNotificationPull) {
						nestedFieldNotificationPull = getNextFieldNumber(innerInputReader);
						boolNotificationPull = NotificationPull.populateBuilderWithField(innerInputReader, builderNotificationPull, nestedFieldNotificationPull);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setNotificationPull(builderNotificationPull.build());
				}
				break;
			case fieldNumberTornRowRequest:
				Vector vcTornRowRequest = reader.readMessages(fieldNumberTornRowRequest);
				for(int i = 0 ; i < vcTornRowRequest.size(); i++) {
					byte[] eachBinData = (byte[]) vcTornRowRequest.elementAt(i);
					TornRowRequest.Builder builderTornRowRequest = TornRowRequest.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolTornRowRequest = true;
					int nestedFieldTornRowRequest = -1;
					while(boolTornRowRequest) {
						nestedFieldTornRowRequest = getNextFieldNumber(innerInputReader);
						boolTornRowRequest = TornRowRequest.populateBuilderWithField(innerInputReader, builderTornRowRequest, nestedFieldTornRowRequest);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setTornRowRequest(builderTornRowRequest.build());
				}
				break;
			case fieldNumberTornRowResponse:
				Vector vcTornRowResponse = reader.readMessages(fieldNumberTornRowResponse);
				for(int i = 0 ; i < vcTornRowResponse.size(); i++) {
					byte[] eachBinData = (byte[]) vcTornRowResponse.elementAt(i);
					TornRowResponse.Builder builderTornRowResponse = TornRowResponse.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolTornRowResponse = true;
					int nestedFieldTornRowResponse = -1;
					while(boolTornRowResponse) {
						nestedFieldTornRowResponse = getNextFieldNumber(innerInputReader);
						boolTornRowResponse = TornRowResponse.populateBuilderWithField(innerInputReader, builderTornRowResponse, nestedFieldTornRowResponse);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setTornRowResponse(builderTornRowResponse.build());
				}
				break;
			case fieldNumberSubscribeResponse:
				Vector vcSubscribeResponse = reader.readMessages(fieldNumberSubscribeResponse);
				for(int i = 0 ; i < vcSubscribeResponse.size(); i++) {
					byte[] eachBinData = (byte[]) vcSubscribeResponse.elementAt(i);
					SubscribeResponse.Builder builderSubscribeResponse = SubscribeResponse.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSubscribeResponse = true;
					int nestedFieldSubscribeResponse = -1;
					while(boolSubscribeResponse) {
						nestedFieldSubscribeResponse = getNextFieldNumber(innerInputReader);
						boolSubscribeResponse = SubscribeResponse.populateBuilderWithField(innerInputReader, builderSubscribeResponse, nestedFieldSubscribeResponse);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setSubscribeResponse(builderSubscribeResponse.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		SimbaMessage.unknownTagHandler = unknownTagHandler;
	}

	public static SimbaMessage parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static SimbaMessage parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static SimbaMessage parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}