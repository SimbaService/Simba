/*******************************************************************************
 *    Copyright 2015 Dorian Perkins, Younghwan Go, Nitin Agrawal, Akshat Aranya
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *******************************************************************************/
package com.necla.simba.protocol;
// Generated by proto2javame, Sun Feb 08 14:12:31 KST 2015.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class BitmapNotify extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final net.jarlehansen.protobuf.javame.ByteString bitmap;
	private static final int fieldNumberBitmap = 1;

	private final int generation;
	private static final int fieldNumberGeneration = 2;
	private final boolean hasGeneration;


	public static Builder newBuilder() {
		return new Builder();
	}

	private BitmapNotify(final Builder builder) {
		if (builder.hasBitmap ) {
			this.bitmap = builder.bitmap;
			this.generation = builder.generation;
			this.hasGeneration = builder.hasGeneration;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" bitmap:" + builder.hasBitmap + "");
		}
	}

	public static class Builder {
		private net.jarlehansen.protobuf.javame.ByteString bitmap;
		private boolean hasBitmap = false;

		private int generation;
		private boolean hasGeneration = false;


		private Builder() {
		}

		public Builder setBitmap(final net.jarlehansen.protobuf.javame.ByteString bitmap) {
			this.bitmap = bitmap;
			this.hasBitmap = true;
			return this;
		}

		public Builder setGeneration(final int generation) {
			this.generation = generation;
			this.hasGeneration = true;
			return this;
		}

		public BitmapNotify build() {
			return new BitmapNotify(this);
		}
	}

	public net.jarlehansen.protobuf.javame.ByteString getBitmap() {
		return bitmap;
	}

	public int getGeneration() {
		return generation;
	}

	public boolean hasGeneration() {
		return hasGeneration;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "bitmap = " + this.bitmap + TAB;
		if(hasGeneration) retValue += "generation = " + this.generation + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeByteStringSize(fieldNumberBitmap, bitmap);
		if(hasGeneration) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberGeneration, generation);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeByteString(fieldNumberBitmap, bitmap);
		if(hasGeneration) writer.writeInt(fieldNumberGeneration, generation);
	}

	static BitmapNotify parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final BitmapNotify.Builder builder = BitmapNotify.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberBitmap:
				builder.setBitmap(reader.readByteString(fieldNumber));
				break;
			case fieldNumberGeneration:
				builder.setGeneration(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		BitmapNotify.unknownTagHandler = unknownTagHandler;
	}

	public static BitmapNotify parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static BitmapNotify parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static BitmapNotify parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}