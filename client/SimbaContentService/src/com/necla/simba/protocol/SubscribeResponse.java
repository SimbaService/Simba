/*******************************************************************************
 *    Copyright 2015 Dorian Perkins, Younghwan Go, Nitin Agrawal, Akshat Aranya
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *******************************************************************************/
package com.necla.simba.protocol;
// Generated by proto2javame, Sun Feb 08 14:12:26 KST 2015.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class SubscribeResponse extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final java.util.Vector columns;
	private static final int fieldNumberColumns = 1;

	private final int version;
	private static final int fieldNumberVersion = 2;
	private final boolean hasVersion;


	public static Builder newBuilder() {
		return new Builder();
	}

	private SubscribeResponse(final Builder builder) {
		if (true) {
			this.columns = builder.columns;
			this.version = builder.version;
			this.hasVersion = builder.hasVersion;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				"");
		}
	}

	public static class Builder {
		private java.util.Vector columns = new java.util.Vector();
		private boolean hasColumns = false;

		private int version;
		private boolean hasVersion = false;


		private Builder() {
		}

		public Builder setColumns(final java.util.Vector columns) {
			if(!hasColumns) {
				hasColumns = true;
			}
			this.columns = columns;
			return this;
		}


		public Builder addElementColumns(final Column element) {
			if(!hasColumns) {
				hasColumns = true;
			}
			columns.addElement(element);
			return this;
		}

		public Builder setVersion(final int version) {
			this.version = version;
			this.hasVersion = true;
			return this;
		}

		public SubscribeResponse build() {
			return new SubscribeResponse(this);
		}
	}

	public java.util.Vector getColumns() {
		return columns;
	}

	public int getVersion() {
		return version;
	}

	public boolean hasVersion() {
		return hasVersion;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "columns = " + this.columns + TAB;
		if(hasVersion) retValue += "version = " + this.version + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasVersion) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberVersion, version);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberColumns, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, columns);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberColumns, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, columns);
		if(hasVersion) writer.writeInt(fieldNumberVersion, version);
	}

	static SubscribeResponse parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final SubscribeResponse.Builder builder = SubscribeResponse.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberColumns:
				Vector vcColumns = reader.readMessages(fieldNumberColumns);
				for(int i = 0 ; i < vcColumns.size(); i++) {
					byte[] eachBinData = (byte[]) vcColumns.elementAt(i);
					Column.Builder builderColumns = Column.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolColumns = true;
					int nestedFieldColumns = -1;
					while(boolColumns) {
						nestedFieldColumns = getNextFieldNumber(innerInputReader);
						boolColumns = Column.populateBuilderWithField(innerInputReader, builderColumns, nestedFieldColumns);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementColumns(builderColumns.build());
				}
				break;
			case fieldNumberVersion:
				builder.setVersion(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		SubscribeResponse.unknownTagHandler = unknownTagHandler;
	}

	public static SubscribeResponse parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static SubscribeResponse parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static SubscribeResponse parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}